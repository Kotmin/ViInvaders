const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

let shipX = canvas.width / 2;
const shipWidth = 30;
const shipHeight = 30;

const enemySize = 30;
const enemySpacing = 50;
const enemyRows = 2;
const enemyCols = 5;

let enemies = [];
let bullets = [];
let lastShotTime = 0;

function createEnemies() {
  enemies = [];
  for (let row = 0; row < enemyRows; row++) {
    for (let col = 0; col < enemyCols; col++) {
      enemies.push({
        x: 100 + col * enemySpacing,
        y: 50 + row * enemySpacing,
        dx: 1,
        type: ["vi", "vim", "neovim"][Math.floor(Math.random() * 3)],
      });
    }
  }
}

function drawShip() {
  ctx.fillStyle = "white";
  ctx.fillRect(shipX - shipWidth / 2, canvas.height - shipHeight - 10, shipWidth, shipHeight);
}

function drawEnemies() {
  ctx.fillStyle = "red";
  ctx.font = "16px monospace";
  enemies.forEach((enemy) => {
    ctx.fillText(enemy.type, enemy.x, enemy.y);
  });
}

function updateEnemies() {
  enemies.forEach((enemy) => {
    enemy.x += enemy.dx;
    if (enemy.x < 0 || enemy.x > canvas.width - enemySize) {
      enemy.dx *= -1;
      enemy.y += enemySpacing / 2;
    }
  });
}

function drawBullets() {
  ctx.fillStyle = "cyan";
  bullets.forEach((bullet) => {
    ctx.fillRect(bullet.x - 2, bullet.y, 4, 10);
  });
}

function updateBullets() {
  bullets = bullets.filter((bullet) => bullet.y > 0);
  bullets.forEach((bullet) => {
    bullet.y -= 5;
  });
}

function shoot() {
  const now = Date.now();
  if (now - lastShotTime > 1000) {
    bullets.push({
      x: shipX,
      y: canvas.height - shipHeight - 10,
    });
    lastShotTime = now;
  }
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawShip();
  drawEnemies();
  updateEnemies();
  drawBullets();
  updateBullets();
}

setInterval(draw, 1000 / 60);

// Klawiatura
document.addEventListener("keydown", (e) => {
  if (e.key === "a") shipX -= 10;
  if (e.key === "d") shipX += 10;
  if (e.key === " ") shoot();
});

// Dotyk â€“ lewa/prawa strona ekranu
canvas.addEventListener("touchstart", (e) => {
  e.preventDefault(); // zapobiega zoomowaniu!
  const x = e.touches[0].clientX;
  const canvasRect = canvas.getBoundingClientRect();
  const relX = x - canvasRect.left;

  if (relX < canvas.width / 3) {
    shipX -= 10;
  } else if (relX > 2 * canvas.width / 3) {
    shipX += 10;
  } else {
    shoot();
  }
}, { passive: false });

createEnemies();
